Stellaris Overview.

			 Main
		           \ 
			    \
    			   Test
			   /   \
			  /	\
			 /	 \
		    uut_gpio	uart
			\	 /
			 \	/
			stopwatch

Main.c
	- Provides a test manager that recieves commands from the PC and initiates tests by calling the appropriate
	  functions from Test.c


Test.c
	- Provides tasks that perform and monitor individual tests. Provides startup and shutdown tasks for 
	  each test that configure stellaris peripherals before test and disable them after a test is complete


UART.c and PC_UART.c
    - Provides functions and ISRs to enable communication over UART to the uut and PC respectively. PC_UART 
      calls the UARTSend() function from UART.c as it has identical functionality. 
      
    - The mirrorUART() function in UART.c sends a message to the uut and waits for a response of the given
      expected length. It has functionality to ensure that it will stop waiting for a response on a timeout.
      
    - PC_UART.c implements a send_results_to_PC() function which is used to send arbitrary data to the PC.
      This is a complicated function as it tends to occur at the end of a test, so a semphore is used to
      signal that the test tasks can be deleted (and the results with them). 
      
    - PC_UART.c also implements a struct Test_results which is used to send pointers to the test results.
      The actual data is not passed through the queue as it is of variable size.


uut_gpio.c
	- ISRs and Utility functions for GPIO operations on the UUT
		- pulse generation and response isrs for airspeed and transponder testing

			PWM is used to generate stimulus for the uut, and GPIO triggered interrupts are used 
			to monitor UUT response. Latency is measured using the stopwatch structure from
			the stopwatch module. A stopwatch is started on the rising edge of the PWM output
			and is subsequently stopped when a rising edge from the uut indicates that it has 
			entered it's own response ISR. 

	- utility functions enable the reseting of the UUT, which is done on system startup.

	
	
PC Overview.

		gui
	     /   |   \
	  /      |      \
      comms  loadTest  fileManager
   
gui.py
	- Provides a graphical UART port monitor and command line interface that controls
	  as the test manager. This creates two datalog files; one to log raw UART port 
	  transmissions, the other to record interpreted test results.
	  
comms.py
	- Provides a kernel for the UART hardware abstraction layer.
	
loadTest.py 
	- Provides utilities that program binary files on to the Stellaris. This can reset the
	  Stellaris too. All of the tests functions that interpret test results are found here.
	  
fileManage.py
	- Provides file creating and writing procedures to make datalog files.